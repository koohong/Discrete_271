list(lower = CI.pi.lower , upper = CI.pi.upper)
}
# Chunk 12
ci.pi(newdata = data.frame(distance = 20), mod.fit.obj = mod.fit , alpha = 0.05)
predicted <- predict(object = mod.fit , newdata =
data.frame(distance = x), type = "response")
x <- 5:55
x
x <- 5:70
predicted <- predict(object = mod.fit , newdata =
data.frame(distance = x), type = "response")
predicted
ci.pi(newdata = data.frame(distance = x),
mod.fit.obj = mod.fit , alpha = 0.05)
predicted <- predict(object = mod.fit , newdata =
data.frame(distance = x), type = "response")
lower <- ci.pi(newdata = data.frame(distance = x),
mod.fit.obj = mod.fit , alpha = 0.05)$lower
upper <- ci.pi(newdata = data.frame(distance = x),
mod.fit.obj = mod.fit , alpha = 0.05)$upper
df <- cbind(lower,upper,predicted)
df
df <- cbind(x,lower,upper,predicted)
df <- cbind(x,lower,upper,predicted) %>% pivot_longer(-x)
df <- as.data.frame(cbind(x,lower,upper,predicted)) %>% pivot_longer(-x)
df
df %>% ggplot(aes(x=x,y = value, color = name)) + geom_point()
df %>% ggplot(aes(x=x,y = value, color = name)) + geom_line()
#| echo: true
OR.hat <- c.table[1,1] * c.table[2,2] / (c.table[2,1] *
c.table[1,2])
#mod.linear <-  # uncomment and replace with your code
mod.linear <- lm(chd ~ ldl + sbp + tobacco + age, data = df)
# Chunk 1
library(here)
source(here("source","get_lib.R"))
# Chunk 2
#| echo: true
#get data
placekick <- read.table(here("data","Placekick.csv"),header = T, sep = ",")
placekick %>% head %>% kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#fit the model
mod.fit <- glm(formula = good ~ distance , family = binomial(link = logit), data = placekick)
mod.fit
# latex_equation <- extract_eq(mod.fit)
# print(latex_equation)
# Chunk 4
#| echo: true
confint(mod.fit)
# Chunk 5
#| echo: true
summary(mod.fit)
# Chunk 6
#| echo: true
mod.fit2 <- glm(formula = good ~ change + distance , family =
binomial(link = logit), data = placekick)
#one at a time test
Anova(mod.fit2, test = "LR")
anova(mod.fit, mod.fit2, test = "LR")
# Chunk 7
#| echo: true
linear.pred <- mod.fit$coefficients[1] +
mod.fit$coefficients[2] * 20
#value of the logit function based on given value of distance at 20
linear.pred
new_data <- data.frame(distance = 20)
predict(mod.fit, newdata = new_data, type = "link")
predict(mod.fit, newdata = new_data, type = "response")
# Chunk 8
#| echo: true
predict(mod.fit, newdata = new_data, type = "response", se = TRUE)
# Chunk 9
#| echo: true
#create a function to get the confidence interval of pi
ci.pi <- function(newdata , mod.fit.obj , alpha){
linear.pred <- predict(object = mod.fit.obj ,
newdata =newdata ,
type = "link", se = TRUE)
CI.lin.pred.lower <- linear.pred$fit - qnorm(p =1-alpha/2)*linear.pred$se
CI.lin.pred.upper <- linear.pred$fit + qnorm(p =1-alpha/2)*linear.pred$se
#get pi
CI.pi.lower <- exp(CI.lin.pred.lower) / (1 +exp(CI.lin.pred.lower))
CI.pi.upper <- exp(CI.lin.pred.upper) / (1 +exp(CI.lin.pred.upper))
list(lower = CI.pi.lower , upper = CI.pi.upper)
}
# Chunk 10
#| echo: true
ci.pi(newdata = data.frame(distance = 20), mod.fit.obj = mod.fit , alpha = 0.05)
# Chunk 11
#| echo: true
x <- 5:70
predicted <- predict(object = mod.fit , newdata =
data.frame(distance = x), type = "response")
lower <- ci.pi(newdata = data.frame(distance = x),
mod.fit.obj = mod.fit , alpha = 0.05)$lower
upper <- ci.pi(newdata = data.frame(distance = x),
mod.fit.obj = mod.fit , alpha = 0.05)$upper
df <- as.data.frame(cbind(x,lower,upper,predicted)) %>% pivot_longer(-x)
p <- df %>% ggplot(aes(x=x,y = value, color = name)) + geom_line()
ggplotly(p)
# Chunk 12
#| echo: true
#finds LR confidence interval
mod.fit
beta.ci <- confint(mod.fit, parm = "distance", level = 0.95)
beta.ci
# Chunk 13
rev(exp(-10*beta.ci))
# Chunk 14
beta.ci <- confint.default(object = mod.fit , parm = "distance",
level = 0.95)
rev(1/exp(beta.ci*10))
# Chunk 15
log.odds.to.prob <- function(x){
p = exp(x)/(1+exp(x))
return(p)
}
log.odds.to.prob(0)
# Chunk 16
log_odds <- c(10,2,1, 0, -1, -2, -10 )
data.frame(log_odds = log_odds,  probability = round(log.odds.to.prob(log_odds),3)) %>% kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 17
log_odds_vector = seq(from = -10, to = 10, by = 0.25)
p = log.odds.to.prob(log_odds_vector)
d = data.frame(log_odds_vector, p)
ggplot(d, aes(x = log_odds_vector, y = p)) +
geom_line() +
geom_vline(aes(xintercept = c(-5)), color = "red", linetype = "dashed")+
geom_vline(aes(xintercept = c(5)), color = "red", linetype = "dashed")+
scale_x_continuous(breaks = seq(-10, 10, by = 1)) +
labs(title = "probability versus odds")
# Chunk 18
df <- SAheart %>%
dplyr::select(tobacco, ldl, sbp, age, chd, obesity)
head(df)%>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 19
df %>%
count(chd) %>%
mutate(prop = round(prop.table(n),2)) %>%
kable(col.names = c('Heart disease', 'N', "Proportion")) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
df %>%
ggplot(aes(x= chd, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
xlab("Heart disease") +
ylab("Proportion") +
scale_y_continuous(label=percent,limits=c(0,1))
# Chunk 20
p1 <- df %>%
mutate(chd=factor(chd)) %>%
ggplot(aes(x = age)) +
geom_density(aes(y = ..density..,  color = chd, fill = chd), alpha = 0.2) +
ggtitle("Distribution of Subjects' Age") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
xlab("Age") +
ylab("Density")
p2 <- df %>%
mutate(chd=factor(chd)) %>%
ggplot(aes(x = ldl)) +
geom_density(aes(y = ..density..,  color = chd, fill = chd), alpha = 0.2) +
ggtitle("Distribution of Subjects' bad cholesterol") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
xlab("Low Density Lipoprotein Cholesterol ") +
ylab("Density")
p3 <-df %>%
mutate(chd=factor(chd)) %>%
ggplot(aes(x = sbp)) +
geom_density(aes(y = ..density..,  color = chd, fill = chd), alpha = 0.2) +
ggtitle("Distribution of Subjects' Blood Pressure") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
xlab("Systolic Blood Pressure") +
ylab("Density")
p4 <-df %>%
mutate(chd=factor(chd)) %>%
ggplot(aes(x = tobacco)) +
geom_density(aes(y = ..density..,  color = chd, fill = chd), alpha = 0.2) +
ggtitle("Distribution of Subjects' Tobacco usage") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
xlab("Cumulative Tobacco usage") +
ylab("Density")
grid.arrange(p1, p2,p3,p4, nrow = 2, ncol = 2)
# Chunk 21
p5 <- df %>%
mutate(chd=factor(chd)) %>%
ggplot(aes(chd, age)) +
geom_boxplot(aes(fill = chd)) +
coord_flip() +
ggtitle("Subjects' Age by Heart Disease") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
ylab("Age") +
xlab("Heart Disease")
p6 <- df %>%
mutate(chd=factor(chd)) %>%
ggplot(aes(chd, ldl)) +
geom_boxplot(aes(fill = chd)) +
coord_flip() +
ggtitle("Subjects' LDL Cholesterol by Heart Disease") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
ylab("LDL Cholesterol") +
xlab(" Heart Disease")
p7 <- df %>%
mutate(chd=factor(chd)) %>%
ggplot(aes(chd, sbp)) +
geom_boxplot(aes(fill = chd)) +
coord_flip() +
ggtitle("Subjects' Blood Pressure by Heart Disease") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
ylab("Systolic Blood Pressure") +
xlab(" Heart Disease")
p8 <- df %>%
mutate(chd=factor(chd)) %>%
ggplot(aes(chd, tobacco)) +
geom_boxplot(aes(fill = chd)) +
coord_flip() +
ggtitle(" Tobacco Usage by Heart Disease") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
ylab("Tobacco Usage ") +
xlab(" Heart Disease")
p5/p6/p7/p8
# Chunk 22
dependent <- "chd"
explanatory <- c("ldl","sbp","tobacco","age")
df %>%
mutate(chd=as.factor(chd)) %>%
summary_factorlist(dependent, explanatory, add_dependent_label = TRUE, p = TRUE) %>%
kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#mod.linear <-  # uncomment and replace with your code
mod.linear <- lm(chd ~ ldl + sbp + tobacco + age, data = df)
latex_equation <- extract_eq(mod.linear )
print(latex_equation)
latex_equation <- extract_eq(mod.linear )
print(latex_equation)
#mod.linear <-  # uncomment and replace with your code
mod.linear <- lm(chd ~ ldl + sbp + tobacco + age, data = df)
summary(mod.linear)
summary(mod.linear)
fitted_values <- data.frame(mod.linear$fitted.values)
fitted_values %>%
ggplot(aes(x= 1:length(mod.linear.fitted.values), y = mod.linear.fitted.values)) +
geom_line() +
geom_hline(aes(yintercept = 0), color = "red") +
geom_hline(aes(yintercept = 1), color = "red")
#mod.logit.h0 <-   # uncomment and replace with your code
mod.logit.h0 <- glm(chd ~ ldl + sbp + tobacco + age, family = binomial(link = logit), data = df)
latex_equation <- extract_eq(mod.logit.h0 )
print(latex_equation)
summary(mod.logit.h0)
#| echo: true
#calculate conditional probability
pi.cond <- pi.table/rowSums(pi.table)
# Chunk 1
library(here)
source(here("source","get_lib.R"))
# Chunk 2
#| echo: true
pi.ij <- c(0.2, 0.3, 0.2, 0.1, 0.1, 0.1)
pi.table <- array(data = pi.ij , dim = c(2,3), dimnames = list(X
= 1:2, Y = 1:3))
pi.table %>% kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 3
#| echo: true
set.seed(9812)
save <- rmultinom(n = 1, size = 1000, prob = pi.ij)
c.table1 <- array(data = save , dim = c(2,3), dimnames = list(X
= 1:2, Y = 1:3))
c.table1/sum(c.table1)
rowSums(c.table1)
#| echo: true
#calculate conditional probability
pi.cond <- pi.table/rowSums(pi.table)
pi.cond
#| echo: true
#calculate conditional probability
pi.cond <- pi.table/rowSums(pi.table)
pi.cond
pi.cond %>% kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#simulate based on the conditional probability
#notice the sample size is different from c.table1
#suppose that we sampled 400 and 600.  This is just what was
#observed or we selected this
set.seed(8111)
save1 <- rmultinom(n = 1, size = 400, prob = pi.cond[1,])
save2 <- rmultinom(n = 1, size = 600, prob = pi.cond[2,])
c.table2 <- array(data = c(save1[1], save2[1], save1[2],
save2[2], save1[3], save2 [3]), dim = c(2,3), dimnames = list(X = 1:2, Y = 1:3))
c.table2
c.table2 %>% kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#| echo: true
wheat <- read.csv(here("data","Wheat.csv"), stringsAsFactors = TRUE)
hrw <- wheat %>% filter(class == "hrw")
p <- ggparcoord(data = hrw,
columns = c(2:6),
groupColumn = 7,
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.9)
ggplotly(p)
#| echo: false
#the first is the baseline
levels(wheat$type)
#using parameter library
a <- model_parameters(mod.fit, digits = 3, p_digits = 3)
a[a$Response=="Scab",-c(8)] %>% kable("html", caption = "Scab") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 1
library(here)
source(here("source","get_lib.R"))
# Chunk 2
#| echo: true
wheat <- read.csv(here("data","Wheat.csv"), stringsAsFactors = TRUE)
hrw <- wheat %>% filter(class == "hrw")
p <- ggparcoord(data = hrw,
columns = c(2:6),
groupColumn = 7,
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.9)
ggplotly(p)
# Chunk 3
#| echo: true
#the first is the baseline
levels(wheat$type)
#library(package = nnet)
mod.fit <- multinom(formula = type ~ class + density + hardness
+ size + weight + moisture , data = wheat)
# Chunk 4
summary(mod.fit)
# Chunk 5
#| echo: true
# library(equatiomatic)
# model <- lm(formula = type ~ class + density + hardness
# + size + weight + moisture , data = wheat)
# latex_equation <- extract_eq(model)
# print(latex_equation)
#using parameter library
a <- model_parameters(mod.fit, digits = 3, p_digits = 3)
a[a$Response=="Scab",-c(8)] %>% kable("html", caption = "Scab") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
a[a$Response=="Sprout",-c(8)] %>% kable("html", caption = "Sprout") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
Anova(mod.fit) %>% kable("html", caption = "Anova()") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
Anova(mod.fit) %>% kable("html", caption = "Anova()") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#| echo: true
pi.hat <- predict(object = mod.fit , newdata = wheat , type =
"probs")
##let check the accuracy
hat_type <- predict(object = mod.fit , newdata = wheat, type = "class" )
result <- table(hat_type, wheat$type)
#accuracy
sum(diag(result))/sum(result)
#| echo: true
Anova(mod.fit) %>% kable("html", caption = "Anova()") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#| echo: true
pi.hat <- predict(object = mod.fit , newdata = wheat , type =
"probs")
##let check the accuracy
hat_type <- predict(object = mod.fit , newdata = wheat, type = "class" )
result <- table(hat_type, wheat$type)
#accuracy
sum(diag(result))/sum(result)
#| echo: true
pi.hat <- predict(object = mod.fit , newdata = wheat , type =
"probs")
##let check the accuracy
hat_type <- predict(object = mod.fit , newdata = wheat, type = "class" )
result <- table(hat_type, wheat$type)
#accuracy
sum(diag(result))/sum(result)
pi.hat
mod0 <- multinom(formula = type ~ density , data = wheat)
new_density <- as.data.frame(seq(0.7,2,by = 0.01))
colnames(new_density) <- "density"
pi_hat <- predict(object = mod0 , newdata = new_density , type =
"probs")
p <- cbind(pi_hat,new_density) %>% pivot_longer(-density) %>%
ggplot(aes(x=density, y = value, color = name)) + geom_point() +
ggtitle("If your model had only density in it")
ggplotly(p)
latex_equation <- extract_eq(mod.fit)
print(latex_equation)
#library(package = nnet)
mod.fit <- multinom(formula = type ~ class + density + hardness
+ size + weight + moisture , data = wheat)
latex_equation <- extract_eq(mod.fit)
mod.fit <- multinom(formula = type ~ class + density + hardness
+ size + weight + moisture , data = wheat)
mod.fit
coefficients(mod.fit)
coefficients(mod.fit) %>% kable("html", caption = "mod.fit") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
sd.wheat <- apply(X = wheat[,-c(1,7,8)], MARGIN = 2, FUN = sd)
sd.wheat
sd.wheat
c.value <- c(1, sd.wheat)
c.value
coefficients(mod.fit) %>% kable("html", caption = "mod.fit") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Odds ratios for j = 2 vs. j = 1 (scab vs. healthy) >
round(exp(c.value*beta.hat2), 2)
#scabl
beta.hat2 <- coefficients(mod.fit)[1,2:7]
# Odds ratios for j = 2 vs. j = 1 (scab vs. healthy) >
round(exp(c.value*beta.hat2), 2)
# Odds ratios for j = 3 vs. j = 1 (sprout vs. healthy)
round(exp(c.value*beta.hat3), 2)
#sprout
beta.hat3 <- coefficients(mod.fit)[2,2:7]
# Odds ratios for j = 3 vs. j = 1 (sprout vs. healthy)
round(exp(c.value*beta.hat3), 2)
sd.wheat
c.value
round(1/exp(c.value*beta.hat2), 2)
coefficients(mod.fit) %>% kable("html", caption = "mod.fit") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Odds ratios for j = 2 vs. j = 1 (scab vs. healthy)
round(exp(c.value*beta.hat2), 2)
round(1/exp(c.value*beta.hat2), 2)
conf.beta <- confint(object = mod.fit , level = 0.95)
conf.beta
head(diet)
diet <- read_csv(here("data","Fiber.csv"))
diet
diet %>% head()
mod.fit.nom <- multinom(formula = bloat ~ fiber , weights =
count , data = diet)
summary(mod.fit.nom)
diet$fiber <- factor(x = diet$fiber , levels = c("none", "bran",
"gum", "both"))
diet$bloat <- factor(x = diet$bloat , levels = c("none", "low",
"medium", "high"))
diet.table <- xtabs(formula = count ~ fiber + bloat , data =
diet)
diet.table
mod.fit.nom <- multinom(formula = bloat ~ fiber , weights =
count , data = diet)
summary(mod.fit.nom)
diet.table
summary(mod.fit.nom)
diet.table
dim(diet)
summary(mod.fit.nom)
Anova(mod.fit.nom)
wheat <- read.csv(here("data","Wheat.csv"))
wheat <- read.csv(here("data","Wheat.csv"))
# Chunk 1
library(here)
source(here("source","get_lib.R"))
levels(wheat$type)
wheat <- read.csv(here("data","Wheat.csv"))
levels(wheat$type)
wheat <- read.csv(here("data","Wheat.csv"))
wheat
levels(wheat$type)
wheat$type
wheat <- read.csv(here("data","Wheat.csv"))
glimpse(wheat)
levels(wheat$type)
wheat$type <- as.factor(wheat$type)
levels(wheat$type)
wheat$type.order <- factor(wheat$type , levels = c("Scab",
"Sprout", "Healthy"))
levels(wheat$type)
wheat$type.order <- factor(wheat$type , levels = c("Scab",
"Sprout", "Healthy"))
levels(wheat$type)
wheat$type.order <- factor(wheat$type , levels = c("Scab",
"Sprout", "Healthy"))
levels(wheat$type)
wheat <- read.csv(here("data","Wheat.csv"))
wheat$type.order <- factor(wheat$type , levels = c("Scab",
"Sprout", "Healthy"))
levels(wheat$type)
wheat <- read.csv(here("data","Wheat.csv"))
glimpse(wheat)
wheat$type <- as.factor(wheat$type)
levels(wheat$type)
wheat$type.order <- factor(wheat$type , levels = c("Scab",
"Sprout", "Healthy"))
levels(wheat$type)
wheat$type.order <- factor(wheat$type , levels = c("Scab",
"Sprout", "Healthy"))
wheat$type.order <- factor(wheat$type , levels = c("Healthy","Sprout","Scab"))
levels(wheat$type)
levels(wheat$type.order)
wheat$type.order <- factor(wheat$type , levels = c("Scab",
"Sprout", "Healthy"))
levels(wheat$type.order)
mod.fit.ord <- polr(formula = type.order ~ class + density +
hardness + size + weight + moisture , data = wheat , method = "logistic")
summary(mod.fit.ord)
Anova(mod.fit.ord)
latex_equation <- extract_eq(mod.fit.ord)
print(latex_equation)
summary(mod.fit.ord)
Anova(mod.fit.ord)
pi.hat.ord <- predict(object = mod.fit.ord , type = "probs"
pi.hat.ord <- predict(object = mod.fit.ord , type = "probs")
pi.hat.ord <- predict(object = mod.fit.ord , type = "probs")
pi.hat.ord
head(pi.hat.ord)
