ylab("Proportion") +
ylim(0,1)
ggplotly(p)
p <- df %>%
ggplot(aes(x= num_awards, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
xlab("Number of awards") +
ylab("Proportion") +
ylim(0,1)
ggplotly(p)
p <- df %>%
ggplot(aes(x= num_awards, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
geom_text(stat='count', aes(label=..count..), vjust= 2) +
xlab("Number of awards") +
ylab("Proportion") +
ylim(0,1)
ggplotly(p)
ggplotly(p)
p <- df %>%
ggplot(aes(x= num_awards, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
xlab("Number of awards") +
ylab("Proportion") +
ylim(0,1)
ggplotly(p)
df %>%
count(prog) %>%
mutate(prop = round(prop.table(n),2)) %>%
kable(col.names = c(' Type of program', 'N', "Proportion"))
df %>%
count(prog) %>%
mutate(prop = round(prop.table(n),2)) %>%
kable("html", caption = "Modeling the Number of Awards",
col.names = c(' Type of program', 'N', "Proportion")) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
df %>%
ggplot(aes(x= prog, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
xlab("Type of program") +
ylab("Proportion") +
ylim(0,1)
df %>%
ggplot(aes(x= num_awards, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
geom_text(stat='count', aes(label=..count..), vjust= 2) +
xlab("Number of awards") +
ylab("Proportion") +
ylim(0,1)
df %>%
ggplot(aes(x= num_awards, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
geom_text(stat='count', aes(label=..count..), vjust= 1) +
xlab("Number of awards") +
ylab("Proportion") +
ylim(0,1)
df %>%
ggplot(aes(x= num_awards, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
geom_text(stat='count', aes(label=..count..), vjust= -1) +
xlab("Number of awards") +
ylab("Proportion") +
ylim(0,1)
df %>%
ggplot(aes(x = math)) +
geom_histogram(aes(y = ..density..), binwidth = 5 ,fill = "DarkBlue", color = "black") +
geom_vline(aes(xintercept = mean(math)), color = "red", linetype = "dashed") +
ggtitle("Distribution of students’ math scores") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
xlab("Socre") +
ylab("Density")
#| echo: false
df %>%
ggplot(aes(x = num_awards)) +
geom_bar(aes(color = prog, fill = prog),alpha=0.2, position = "dodge" ) +
ggtitle("Distribution of the Number of Awards by Program Types") +
xlab("Award") +
ylab("Count")
#| echo: false
df %>%
ggplot(aes(num_awards, math)) +
geom_boxplot(aes(fill = factor(num_awards))) +
geom_jitter()+
coord_flip() +
ggtitle("Math Score by the Number of Awards") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
xlab("Number of Awards") +
ylab("Math Score")
dependent <- "num_awards"
explanatory <- c("prog", "math")
df %>%
summary_factorlist(dependent, explanatory, add_dependent_label = TRUE) %>%
knitr::kable()
dependent <- "num_awards"
explanatory <- c("prog", "math")
df %>%
summary_factorlist(dependent, explanatory, add_dependent_label = TRUE) %>%
kable("html", caption = "Modeling the Number of Awards",
col.names = c(' Type of program', 'N', "Proportion")) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
df %>%
summary_factorlist(dependent, explanatory, add_dependent_label = TRUE) %>%
kable("html", caption = "Modeling the Number of Awards") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
poisson.mod.1 <- poisson.mod.1 <- glm(num_awards ~ prog + math,
data = df,
family = poisson)
summary(poisson.mod.1)
(exp(coef(poisson.mod.1)) - 1) * 100
# Convert the confidence intervals to percentage change, corresponding to the coefficient estimates
beta.interval <- confint(poisson.mod.1, level = 0.95)
beta.interval
beta.interval %>% kable("html", caption = "beta interval") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Confident intervals for the original coefficient estimates
# Replace with your code
beta.interval <- confint(poisson.mod.1, level = 0.95)
# Confident intervals for the original coefficient estimates
beta.interval <- confint(poisson.mod.1, level = 0.95)
beta.interval %>% kable("html", caption = "beta interval") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
100 * (exp(beta.interval) - 1)
## test model differences with chi square test
Anova(poisson.mod.1)
summary(poisson.mod.1)
## calculate and store predicted values
fitted_values <- predict(poisson.mod.1, type="response")
ggplot(df, aes(x = math, y = fitted_values, colour = prog)) +
geom_point(aes(y = num_awards), alpha=.5, position=position_jitter(h=.2)) +
geom_line(size = 1) +
labs(x = "Math Score", y = "Expected number of awards")
p <- ggplot(df, aes(x = math, y = fitted_values, colour = prog)) +
geom_point(aes(y = num_awards), alpha=.5, position=position_jitter(h=.2)) +
geom_line(size = 1) +
labs(x = "Math Score", y = "Expected number of awards")
ggplotly(p)
## compute AIC
data.frame(mod.1 = AIC(mod.1, k = 2), mod.2 = AIC(mod.2), mod.3 = AIC(mod.3))
## fit models
mod.1 <- glm(num_awards ~ math, data = df, family = poisson)
mod.2 <- glm(num_awards ~ prog, data = df, family = poisson)
mod.3 <- glm(num_awards ~ prog + math, data = df, family = poisson)
## compute AIC
data.frame(mod.1 = AIC(mod.1, k = 2), mod.2 = AIC(mod.2), mod.3 = AIC(mod.3))
## compute corrected AIC
## compute BIC
pred <- predict(poisson.mod.1, type = "response")
res <- residuals(poisson.mod.1, type = "pearson")
s.res <- rstandard(poisson.mod.1, type = "pearson")
lin.pred <- poisson.mod.1$linear.predictors
df1 %>%
ggplot(aes(x = df1$math , y = df1$s.res)) +
geom_point() +
geom_hline(yintercept=c(3, 2, 0, -2, -3), color = "red", linetype = "dashed")+
geom_smooth(se = FALSE)+
ggtitle("Standardized residuals vs. Math") +
xlab("Math") +
ylab("Standardized Pearson residuals")
df1 <- data.frame(df, pred, res, s.res, lin.pred)
df1 %>%
ggplot(aes(x = df1$math , y = df1$s.res)) +
geom_point() +
geom_hline(yintercept=c(3, 2, 0, -2, -3), color = "red", linetype = "dashed")+
geom_smooth(se = FALSE)+
ggtitle("Standardized residuals vs. Math") +
xlab("Math") +
ylab("Standardized Pearson residuals")
# Calculate Pearson statistic residuals
pearson_stat <- sum(residuals(poisson.mod.1, type = "pearson")ˆ2)
pearson_stat
# Calculate Pearson statistic residuals
pearson_stat <- sum(residuals(poisson.mod.1, type = "pearson")ˆ2)
residuals(poisson.mod.1, type = "pearson")
residuals(poisson.mod.1, type = "pearson")^2
# Calculate Pearson statistic residuals
pearson_stat <- sum(residuals(poisson.mod.1, type = "pearson")^2)
pearson_stat
# Get p value associated with the pearson statistic
pearson_p.value <- pchisq(pearson_stat, poisson.mod.1$df.residual,
lower.tail = FALSE)
pearson_p.value
#Calculate deviance p value
deviance_p.value <- pchisq(poisson.mod.1$deviance, poisson.mod.1$df.residual,
lower.tail = FALSE)
deviance_p.value
# quasi.poisson <- uncomment and replace with your code
quasi.poisson <- glm(num_awards ~ prog + math, data = df, family = quasipoisson)
# quasipoisson regression
quasi.poisson <- glm(num_awards ~ prog + math, data = df, family = quasipoisson)
# negative binomial regression
neg.binom <- glm.nb(num_awards ~ prog + math, data = df)
stargazer(poisson.mod.1, quasi.poisson, neg.binom, type="text")
# Chunk 1
library(here)
source(here("source","get_lib.R"))
# Chunk 2
#| echo: true
wheat <- read.csv(here("data","Wheat.csv"), stringsAsFactors = TRUE)
hrw <- wheat %>% filter(class == "hrw")
p <- ggparcoord(data = hrw,
columns = c(2:6),
groupColumn = 7,
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.9)
ggplotly(p)
# Chunk 3
#| echo: true
#the first is the baseline
levels(wheat$type)
#library(package = nnet)
mod.fit <- multinom(formula = type ~ class + density + hardness
+ size + weight + moisture , data = wheat)
# Chunk 4
summary(mod.fit)
# Chunk 5
#| echo: true
# library(equatiomatic)
# model <- lm(formula = type ~ class + density + hardness
# + size + weight + moisture , data = wheat)
# latex_equation <- extract_eq(model)
# print(latex_equation)
# Chunk 6
#using parameter library
a <- model_parameters(mod.fit, digits = 3, p_digits = 3)
a[a$Response=="Scab",-c(8)] %>% kable("html", caption = "Scab") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
a[a$Response=="Sprout",-c(8)] %>% kable("html", caption = "Sprout") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 7
#| echo: true
Anova(mod.fit) %>% kable("html", caption = "Anova()") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 8
#| echo: true
pi.hat <- predict(object = mod.fit , newdata = wheat , type =
"probs")
pi.hat %>% head() %>% kable("html", caption = "pi.hat") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 9
##let check the accuracy
hat_type <- predict(object = mod.fit , newdata = wheat, type = "class" )
result <- table(hat_type, wheat$type)
#accuracy
sum(diag(result))/sum(result)
# Chunk 10
mod0 <- multinom(formula = type ~ density , data = wheat)
new_density <- as.data.frame(seq(0.7,2,by = 0.01))
colnames(new_density) <- "density"
pi_hat <- predict(object = mod0 , newdata = new_density , type =
"probs")
p <- cbind(pi_hat,new_density) %>% pivot_longer(-density) %>%
ggplot(aes(x=density, y = value, color = name)) + geom_point() +
ggtitle("If your model had only density in it")
ggplotly(p)
# Chunk 11
#| echo: true
mod.fit <- multinom(formula = type ~ class + density + hardness
+ size + weight + moisture , data = wheat)
coefficients(mod.fit) %>% kable("html", caption = "mod.fit") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 12
#| echo: true
sd.wheat <- apply(X = wheat[,-c(1,7,8)], MARGIN = 2, FUN = sd)
sd.wheat
c.value <- c(1, sd.wheat)
c.value
# Chunk 13
#scabl
beta.hat2 <- coefficients(mod.fit)[1,2:7]
# Odds ratios for j = 2 vs. j = 1 (scab vs. healthy)
round(exp(c.value*beta.hat2), 2)
round(1/exp(c.value*beta.hat2), 2)
# Chunk 14
#sprout
beta.hat3 <- coefficients(mod.fit)[2,2:7]
# Odds ratios for j = 3 vs. j = 1 (sprout vs. healthy)
round(exp(c.value*beta.hat3), 2)
# Chunk 15
#| echo: true
# Wald intervals
conf.beta <- confint(object = mod.fit , level = 0.95)
conf.beta
# Chunk 16
#| echo: true
diet <- read_csv(here("data","Fiber.csv"))
dim(diet)
diet$fiber <- factor(x = diet$fiber , levels = c("none", "bran",
"gum", "both"))
diet$bloat <- factor(x = diet$bloat , levels = c("none", "low",
"medium", "high"))
diet.table <- xtabs(formula = count ~ fiber + bloat , data =
diet)
diet.table
mod.fit.nom <- multinom(formula = bloat ~ fiber , weights =
count , data = diet)
# Chunk 17
summary(mod.fit.nom)
# Chunk 18
Anova(mod.fit.nom)
# Confident intervals for the original coefficient estimates
beta.interval <- confint(poisson.mod.1, level = 0.95)
beta.interval %>% kable("html", caption = "beta interval") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
100 * (exp(beta.interval) - 1)
100 * (exp(beta.interval) - 1) %>% as.data.frame()
100 * (exp(beta.interval) - 1) %>% as.data.frame() %>%
kable("html", caption = "beta interval") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
temp <- 100 * (exp(beta.interval) - 1)
class(temp)
temp <- as.data.frame(temp)
temp
class(temp)
temp %>%
kable("html", caption = "beta interval") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
temp <- as.data.frame(100 * (exp(beta.interval) - 1))
temp <- as.data.frame(100 * (exp(beta.interval) - 1))
temp %>%
kable("html", caption = "beta interval") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
as.data.frame(100 * (exp(beta.interval) - 1)) %>%
kable("html", caption = "beta interval") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 1
library(here)
source(here("source","get_lib.R"))
# Chunk 2
df <- read.csv("./data/PossionEx1.csv",
stringsAsFactors = F,
header=TRUE, sep=",")
head(df) %>%
kable("html", caption = "Modeling the Number of Awards") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#str(df)
## convert prog to factor
df$prog = factor(df$prog)
# Checking the number of missing values for each of the variables
# df[!complete.cases(df),]
sapply(df, function(x) sum(is.na(x)))
# Chunk 3
#| echo: false
df %>%
count(num_awards) %>%
mutate(prop = round(prop.table(n),2)) %>%
kable("html", caption = "Modeling the Number of Awards",
col.names = c('Number of awards', 'N', "Proportion")) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
df %>%
ggplot(aes(x= num_awards, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
geom_text(stat='count', aes(label=..count..), vjust= -1) +
xlab("Number of awards") +
ylab("Proportion") +
ylim(0,1)
# Chunk 4
#| echo: false
#|
df %>%
count(prog) %>%
mutate(prop = round(prop.table(n),2)) %>%
kable("html", caption = "Modeling the Number of Awards",
col.names = c(' Type of program', 'N', "Proportion")) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
df %>%
ggplot(aes(x= prog, y = ..prop.., group = 1)) +
geom_bar(fill = 'DarkBlue', color = 'black') +
geom_text(stat='count', aes(label=..count..), vjust=-1) +
xlab("Type of program") +
ylab("Proportion") +
ylim(0,1)
# Chunk 5
#| echo: false
df %>%
ggplot(aes(x = math)) +
geom_histogram(aes(y = ..density..), binwidth = 5 ,fill = "DarkBlue", color = "black") +
geom_vline(aes(xintercept = mean(math)), color = "red", linetype = "dashed") +
ggtitle("Distribution of students’ math scores") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
xlab("Socre") +
ylab("Density")
# Chunk 6
#| echo: false
df %>%
ggplot(aes(x = num_awards)) +
geom_bar(aes(color = prog, fill = prog),alpha=0.2, position = "dodge" ) +
ggtitle("Distribution of the Number of Awards by Program Types") +
xlab("Award") +
ylab("Count")
# Chunk 7
#| echo: false
df %>%
ggplot(aes(num_awards, math)) +
geom_boxplot(aes(fill = factor(num_awards))) +
geom_jitter()+
coord_flip() +
ggtitle("Math Score by the Number of Awards") +
theme(plot.title = element_text(lineheight=1, face="bold")) +
xlab("Number of Awards") +
ylab("Math Score")
# Chunk 8
#| echo: false
dependent <- "num_awards"
explanatory <- c("prog", "math")
df %>%
summary_factorlist(dependent, explanatory, add_dependent_label = TRUE) %>%
kable("html", caption = "Modeling the Number of Awards") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 9
#| echo: true
poisson.mod.1 <- poisson.mod.1 <- glm(num_awards ~ prog + math,
data = df,
family = poisson)
summary(poisson.mod.1)
# Chunk 10
#| echo: true
(exp(coef(poisson.mod.1)) - 1) * 100
# Chunk 11
## test model differences with chi square test
Anova(poisson.mod.1)
# Chunk 12
# uncomment and run the code
## calculate and store predicted values
fitted_values <- predict(poisson.mod.1, type="response")
## create the plot
p <- ggplot(df, aes(x = math, y = fitted_values, colour = prog)) +
geom_point(aes(y = num_awards), alpha=.5, position=position_jitter(h=.2)) +
geom_line(size = 1) +
labs(x = "Math Score", y = "Expected number of awards")
ggplotly(p)
# Chunk 13
# Confident intervals for the original coefficient estimates
beta.interval <- confint(poisson.mod.1, level = 0.95)
beta.interval %>% kable("html", caption = "beta interval") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Convert the confidence intervals to percentage change, corresponding to the coefficient estimates
as.data.frame(100 * (exp(beta.interval) - 1)) %>%
kable("html", caption = "beta interval") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 14
## fit models
mod.1 <- glm(num_awards ~ math, data = df, family = poisson)
mod.2 <- glm(num_awards ~ prog, data = df, family = poisson)
mod.3 <- glm(num_awards ~ prog + math, data = df, family = poisson)
## compute AIC
data.frame(mod.1 = AIC(mod.1, k = 2), mod.2 = AIC(mod.2), mod.3 = AIC(mod.3))
## compute corrected AIC
data.frame(mod.1 = AICc(mod.1), mod.2 = AICc(mod.2), mod.3 = AICc(mod.3))
## compute BIC
data.frame(mod.1 = BIC(mod.1), mod.2 = BIC(mod.2), mod.3 = BIC(mod.3))
# Chunk 15
#| echo: false
pred <- predict(poisson.mod.1, type = "response")
res <- residuals(poisson.mod.1, type = "pearson")
s.res <- rstandard(poisson.mod.1, type = "pearson")
lin.pred <- poisson.mod.1$linear.predictors
df1 <- data.frame(df, pred, res, s.res, lin.pred)
#Standardized Pearson residual vs math plot
df1 %>%
ggplot(aes(x = df1$math , y = df1$s.res)) +
geom_point() +
geom_hline(yintercept=c(3, 2, 0, -2, -3), color = "red", linetype = "dashed")+
geom_smooth(se = FALSE)+
ggtitle("Standardized residuals vs. Math") +
xlab("Math") +
ylab("Standardized Pearson residuals")
#Standardized Pearson residual vs fitted values
df1 %>%
ggplot(aes(x = df1$pred , y = df1$s.res)) +
geom_point() +
geom_hline(yintercept=c(3, 2, 0, -2, -3), color = "red", linetype = "dashed")+
geom_smooth(se = FALSE)+
ggtitle("Standardized residuals vs. Math") +
xlab("Fitted values") +
ylab("Standardized Pearson residuals")
#Standardized Pearson residual vs linear predictor
df1 %>%
ggplot(aes(x = df1$lin.pred , y = df1$s.res)) +
geom_point() +
geom_hline(yintercept=c(3, 2, 0, -2, -3), color = "red", linetype = "dashed")+
geom_smooth(se = FALSE)+
ggtitle("Standardized residuals vs. Math") +
xlab("Linear predictor") +
ylab("Standardized Pearson residuals")
# Chunk 16
#| echo: true
# Calculate Pearson statistic residuals
pearson_stat <- sum(residuals(poisson.mod.1, type = "pearson")^2)
pearson_stat
# Get p value associated with the pearson statistic
pearson_p.value <- pchisq(pearson_stat, poisson.mod.1$df.residual,
lower.tail = FALSE)
pearson_p.value
# Chunk 17
#Calculate deviance p value
deviance_p.value <- pchisq(poisson.mod.1$deviance, poisson.mod.1$df.residual,
lower.tail = FALSE)
deviance_p.value
# Chunk 18
#| echo: true
# replace with your code
dispersiontest(poisson.mod.1)
# Chunk 19
# quasipoisson regression
quasi.poisson <- glm(num_awards ~ prog + math, data = df, family = quasipoisson)
# negative binomial regression
neg.binom <- glm.nb(num_awards ~ prog + math, data = df)
# Chunk 20
stargazer(poisson.mod.1, quasi.poisson, neg.binom, type="text")
